version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:5-focal
    container_name: trade-ai-mongodb-prod
    restart: always
    ports:
      - "127.0.0.1:27017:27017"  # Bind to localhost only for security
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./backups/mongodb:/backups
    networks:
      - trade-ai-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/admin --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis
  redis:
    image: redis:7-alpine
    container_name: trade-ai-redis-prod
    restart: always
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only for security
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: trade-ai-backend-prod
    restart: always
    ports:
      - "127.0.0.1:5001:5000"  # Bind to localhost only, nginx will proxy
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL}
      SECURITY_LOG_DIR: /app/logs/security
      SECURITY_LOG_LEVEL: ${SECURITY_LOG_LEVEL}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT}
      MAX_LOGIN_ATTEMPTS: ${MAX_LOGIN_ATTEMPTS}
      LOCKOUT_TIME: ${LOCKOUT_TIME}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups/backend:/app/backups
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        CACHEBUST: ${CACHEBUST}
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL}
        REACT_APP_AI_API_URL: ${REACT_APP_AI_API_URL}
        REACT_APP_MONITORING_URL: ${REACT_APP_MONITORING_URL}
        NODE_ENV: production
    container_name: trade-ai-frontend-prod
    restart: always
    ports:
      - "127.0.0.1:3001:80"  # Bind to localhost only, nginx will proxy
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL}
      REACT_APP_AI_API_URL: ${REACT_APP_AI_API_URL}
      REACT_APP_MONITORING_URL: ${REACT_APP_MONITORING_URL}
    depends_on:
      - backend
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health.json || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # AI Services
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile
    container_name: trade-ai-ai-services-prod
    restart: always
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only, nginx will proxy
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - MODEL_DIR=/app/models
      - DATA_DIR=/app/data
      - LOG_LEVEL=${LOG_LEVEL}
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      - AI_MODEL_TYPE=${AI_MODEL_TYPE}
      - AI_MODEL_PATH=${AI_MODEL_PATH}
      - AI_USE_LOCAL_MODELS=${AI_USE_LOCAL_MODELS}
    volumes:
      - ./ai-services:/app
      - ai_services_models:/app/models
      - ai_services_data:/app/data
      - ./logs/ai-services:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring Service
  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    container_name: trade-ai-monitoring-prod
    restart: always
    ports:
      - "127.0.0.1:8081:8080"  # Bind to localhost only, nginx will proxy
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - LOG_LEVEL=${LOG_LEVEL}
      - RETENTION_DAYS=${RETENTION_DAYS}
      - SYSTEM_CHECK_INTERVAL=${SYSTEM_CHECK_INTERVAL}
      - SERVICE_CHECK_INTERVAL=${SERVICE_CHECK_INTERVAL}
      - BACKEND_URL=http://backend:5000
      - FRONTEND_URL=http://frontend:80
      - AI_SERVICES_URL=http://ai-services:8000
    volumes:
      - ./monitoring:/app
      - monitoring_data:/app/data
      - ./logs/monitoring:/app/logs
    depends_on:
      - backend
      - frontend
      - ai-services
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: trade-ai-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - ai-services
      - monitoring
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Log Rotation Service
  logrotate:
    image: alpine:latest
    container_name: trade-ai-logrotate-prod
    restart: always
    volumes:
      - ./logs:/logs
      - ./scripts/logrotate.conf:/etc/logrotate.conf:ro
    command: >
      sh -c "
        apk add --no-cache logrotate &&
        while true; do
          logrotate -f /etc/logrotate.conf
          sleep 86400
        done
      "
    networks:
      - trade-ai-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  ai_services_models:
    driver: local
  ai_services_data:
    driver: local
  monitoring_data:
    driver: local

networks:
  trade-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16